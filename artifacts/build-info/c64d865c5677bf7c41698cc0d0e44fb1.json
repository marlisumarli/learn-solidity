{
	"id": "c64d865c5677bf7c41698cc0d0e44fb1",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.5.17",
	"solcLongVersion": "0.5.17+commit.d19bba13",
	"input": {
		"language": "Solidity",
		"sources": {
			"Array.sol": {
				"content": "pragma solidity ^0.5.0;\n\ncontract ArrayOnSol{\n    function testArray() public pure returns (bytes memory) {\n        uint len = 7;\n\n        // Dynamic array\n        uint[] memory a = new uint[](7);\n\n        // Bytes is same as byte[]\n        bytes memory b = new bytes(len);\n\n        assert(a.length == 7);\n        assert(b.length == len);\n\n        // Access aray variable\n        a[6] = 8;\n\n        // Static array\n        uint[3] memory c = [uint(1), 2, 3];\n        assert(c.length == 3);\n\n        return b;\n    }\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"Array.sol": {
				"ArrayOnSol": {
					"abi": [
						{
							"constant": true,
							"inputs": [],
							"name": "testArray",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "",
									"type": "bytes"
								}
							],
							"payable": false,
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"methods": {}
					},
					"evm": {
						"assembly": "    /* \"Array.sol\":25:516  contract ArrayOnSol{... */\n  mstore(0x40, 0x80)\n  callvalue\n    /* \"--CODEGEN--\":8:17   */\n  dup1\n    /* \"--CODEGEN--\":5:7   */\n  iszero\n  tag_1\n  jumpi\n    /* \"--CODEGEN--\":30:31   */\n  0x00\n    /* \"--CODEGEN--\":27:28   */\n  dup1\n    /* \"--CODEGEN--\":20:32   */\n  revert\n    /* \"--CODEGEN--\":5:7   */\ntag_1:\n    /* \"Array.sol\":25:516  contract ArrayOnSol{... */\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"Array.sol\":25:516  contract ArrayOnSol{... */\n      mstore(0x40, 0x80)\n      callvalue\n        /* \"--CODEGEN--\":8:17   */\n      dup1\n        /* \"--CODEGEN--\":5:7   */\n      iszero\n      tag_1\n      jumpi\n        /* \"--CODEGEN--\":30:31   */\n      0x00\n        /* \"--CODEGEN--\":27:28   */\n      dup1\n        /* \"--CODEGEN--\":20:32   */\n      revert\n        /* \"--CODEGEN--\":5:7   */\n    tag_1:\n        /* \"Array.sol\":25:516  contract ArrayOnSol{... */\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x2283bffd\n      eq\n      tag_3\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"Array.sol\":50:514  function testArray() public pure returns (bytes memory) {... */\n    tag_3:\n      tag_4\n      tag_5\n      jump\t// in\n    tag_4:\n      mload(0x40)\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      dup4\n      dup2\n      dup2\n      mload\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      swap1\n      dup1\n      dup4\n      dup4\n        /* \"--CODEGEN--\":23:24   */\n      0x00\n        /* \"--CODEGEN--\":8:108   */\n    tag_6:\n        /* \"--CODEGEN--\":33:36   */\n      dup4\n        /* \"--CODEGEN--\":30:31   */\n      dup2\n        /* \"--CODEGEN--\":27:37   */\n      lt\n        /* \"--CODEGEN--\":8:108   */\n      iszero\n      tag_8\n      jumpi\n        /* \"--CODEGEN--\":99:100   */\n      dup1\n        /* \"--CODEGEN--\":94:97   */\n      dup3\n        /* \"--CODEGEN--\":90:101   */\n      add\n        /* \"--CODEGEN--\":84:102   */\n      mload\n        /* \"--CODEGEN--\":80:81   */\n      dup2\n        /* \"--CODEGEN--\":75:78   */\n      dup5\n        /* \"--CODEGEN--\":71:82   */\n      add\n        /* \"--CODEGEN--\":64:103   */\n      mstore\n        /* \"--CODEGEN--\":52:54   */\n      0x20\n        /* \"--CODEGEN--\":49:50   */\n      dup2\n        /* \"--CODEGEN--\":45:55   */\n      add\n        /* \"--CODEGEN--\":40:55   */\n      swap1\n      pop\n        /* \"--CODEGEN--\":8:108   */\n      jump(tag_6)\n    tag_8:\n        /* \"--CODEGEN--\":12:26   */\n      pop\n        /* \"Array.sol\":50:514  function testArray() public pure returns (bytes memory) {... */\n      pop\n      pop\n      pop\n      swap1\n      pop\n      swap1\n      dup2\n      add\n      swap1\n      0x1f\n      and\n      dup1\n      iszero\n      tag_9\n      jumpi\n      dup1\n      dup3\n      sub\n      dup1\n      mload\n      0x01\n      dup4\n      0x20\n      sub\n      0x0100\n      exp\n      sub\n      not\n      and\n      dup2\n      mstore\n      0x20\n      add\n      swap2\n      pop\n    tag_9:\n      pop\n      swap3\n      pop\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n    tag_5:\n        /* \"Array.sol\":92:104  bytes memory */\n      0x60\n        /* \"Array.sol\":116:124  uint len */\n      0x00\n        /* \"Array.sol\":127:128  7 */\n      0x07\n        /* \"Array.sol\":116:128  uint len = 7 */\n      swap1\n      pop\n        /* \"Array.sol\":164:179  uint[] memory a */\n      0x60\n        /* \"Array.sol\":193:194  7 */\n      0x07\n        /* \"Array.sol\":182:195  new uint[](7) */\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_11\n      jumpi\n      dup2\n      0x20\n      add\n        /* \"--CODEGEN--\":29:31   */\n      0x20\n        /* \"--CODEGEN--\":21:27   */\n      dup3\n        /* \"--CODEGEN--\":17:32   */\n      mul\n        /* \"--CODEGEN--\":117:121   */\n      dup1\n        /* \"--CODEGEN--\":105:115   */\n      codesize\n        /* \"--CODEGEN--\":97:103   */\n      dup4\n        /* \"--CODEGEN--\":88:122   */\n      codecopy\n        /* \"--CODEGEN--\":148:152   */\n      dup1\n        /* \"--CODEGEN--\":140:146   */\n      dup3\n        /* \"--CODEGEN--\":136:153   */\n      add\n        /* \"--CODEGEN--\":126:153   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":0:157   */\n      pop\n        /* \"Array.sol\":182:195  new uint[](7) */\n      swap1\n      pop\n    tag_11:\n      pop\n        /* \"Array.sol\":164:195  uint[] memory a = new uint[](7) */\n      swap1\n      pop\n        /* \"Array.sol\":241:255  bytes memory b */\n      0x60\n        /* \"Array.sol\":268:271  len */\n      dup3\n        /* \"Array.sol\":258:272  new bytes(len) */\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x1f\n      add\n      not(0x1f)\n      and\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_12\n      jumpi\n      dup2\n      0x20\n      add\n        /* \"--CODEGEN--\":29:30   */\n      0x01\n        /* \"--CODEGEN--\":21:27   */\n      dup3\n        /* \"--CODEGEN--\":17:31   */\n      mul\n        /* \"--CODEGEN--\":116:120   */\n      dup1\n        /* \"--CODEGEN--\":104:114   */\n      codesize\n        /* \"--CODEGEN--\":96:102   */\n      dup4\n        /* \"--CODEGEN--\":87:121   */\n      codecopy\n        /* \"--CODEGEN--\":147:151   */\n      dup1\n        /* \"--CODEGEN--\":139:145   */\n      dup3\n        /* \"--CODEGEN--\":135:152   */\n      add\n        /* \"--CODEGEN--\":125:152   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":0:156   */\n      pop\n        /* \"Array.sol\":258:272  new bytes(len) */\n      swap1\n      pop\n    tag_12:\n      pop\n        /* \"Array.sol\":241:272  bytes memory b = new bytes(len) */\n      swap1\n      pop\n        /* \"Array.sol\":302:303  7 */\n      0x07\n        /* \"Array.sol\":290:291  a */\n      dup3\n        /* \"Array.sol\":290:298  a.length */\n      mload\n        /* \"Array.sol\":290:303  a.length == 7 */\n      eq\n        /* \"Array.sol\":283:304  assert(a.length == 7) */\n      tag_13\n      jumpi\n      invalid\n    tag_13:\n        /* \"Array.sol\":333:336  len */\n      dup3\n        /* \"Array.sol\":321:322  b */\n      dup2\n        /* \"Array.sol\":321:329  b.length */\n      mload\n        /* \"Array.sol\":321:336  b.length == len */\n      eq\n        /* \"Array.sol\":314:337  assert(b.length == len) */\n      tag_14\n      jumpi\n      invalid\n    tag_14:\n        /* \"Array.sol\":387:388  8 */\n      0x08\n        /* \"Array.sol\":380:381  a */\n      dup3\n        /* \"Array.sol\":382:383  6 */\n      0x06\n        /* \"Array.sol\":380:384  a[6] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_15\n      jumpi\n      invalid\n    tag_15:\n      0x20\n      mul\n      0x20\n      add\n      add\n        /* \"Array.sol\":380:388  a[6] = 8 */\n      dup2\n      dup2\n      mstore\n      pop\n      pop\n        /* \"Array.sol\":423:439  uint[3] memory c */\n      tag_16\n      tag_17\n      jump\t// in\n    tag_16:\n        /* \"Array.sol\":423:457  uint[3] memory c = [uint(1), 2, 3] */\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n        /* \"Array.sol\":448:449  1 */\n      0x01\n        /* \"Array.sol\":423:457  uint[3] memory c = [uint(1), 2, 3] */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"Array.sol\":452:453  2 */\n      0x02\n        /* \"Array.sol\":423:457  uint[3] memory c = [uint(1), 2, 3] */\n      dup2\n      mstore\n      0x20\n      add\n        /* \"Array.sol\":455:456  3 */\n      0x03\n        /* \"Array.sol\":423:457  uint[3] memory c = [uint(1), 2, 3] */\n      dup2\n      mstore\n      pop\n      swap1\n      pop\n        /* \"Array.sol\":486:487  3 */\n      0x03\n        /* \"Array.sol\":474:482  c.length */\n      dup1\n        /* \"Array.sol\":474:487  c.length == 3 */\n      eq\n        /* \"Array.sol\":467:488  assert(c.length == 3) */\n      tag_18\n      jumpi\n      invalid\n    tag_18:\n        /* \"Array.sol\":506:507  b */\n      dup2\n        /* \"Array.sol\":499:507  return b */\n      swap5\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"Array.sol\":50:514  function testArray() public pure returns (bytes memory) {... */\n      swap1\n      jump\t// out\n        /* \"Array.sol\":25:516  contract ArrayOnSol{... */\n    tag_17:\n      mload(0x40)\n      dup1\n      0x60\n      add\n      0x40\n      mstore\n      dup1\n      0x03\n      swap1\n        /* \"--CODEGEN--\":29:31   */\n      0x20\n        /* \"--CODEGEN--\":21:27   */\n      dup3\n        /* \"--CODEGEN--\":17:32   */\n      mul\n        /* \"--CODEGEN--\":117:121   */\n      dup1\n        /* \"--CODEGEN--\":105:115   */\n      codesize\n        /* \"--CODEGEN--\":97:103   */\n      dup4\n        /* \"--CODEGEN--\":88:122   */\n      codecopy\n        /* \"--CODEGEN--\":148:152   */\n      dup1\n        /* \"--CODEGEN--\":140:146   */\n      dup3\n        /* \"--CODEGEN--\":136:153   */\n      add\n        /* \"--CODEGEN--\":126:153   */\n      swap2\n      pop\n        /* \"--CODEGEN--\":0:157   */\n      pop\n        /* \"Array.sol\":25:516  contract ArrayOnSol{... */\n      swap1\n      pop\n      pop\n      swap1\n      jump\t// out\n\n    auxdata: 0xa265627a7a723158205bad68ed75ba46b97e6d115f21cd6fe47cb3c9ccf33056a45fc7b946b334e30a64736f6c63430005110032\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b506101eb806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80632283bffd14610030575b600080fd5b6100386100b3565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561007857808201518184015260208101905061005d565b50505050905090810190601f1680156100a55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6060600060079050606060076040519080825280602002602001820160405280156100ed5781602001602082028038833980820191505090505b5090506060826040519080825280601f01601f1916602001820160405280156101255781602001600182028038833980820191505090505b509050600782511461013357fe5b8281511461013d57fe5b60088260068151811061014c57fe5b602002602001018181525050610160610194565b60405180606001604052806001815260200160028152602001600381525090506003801461018a57fe5b8194505050505090565b604051806060016040528060039060208202803883398082019150509050509056fea265627a7a723158205bad68ed75ba46b97e6d115f21cd6fe47cb3c9ccf33056a45fc7b946b334e30a64736f6c63430005110032",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1EB DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2283BFFD EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x38 PUSH2 0xB3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x78 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x5D JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xA5 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x7 SWAP1 POP PUSH1 0x60 PUSH1 0x7 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xED JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x60 DUP3 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x125 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x7 DUP3 MLOAD EQ PUSH2 0x133 JUMPI INVALID JUMPDEST DUP3 DUP2 MLOAD EQ PUSH2 0x13D JUMPI INVALID JUMPDEST PUSH1 0x8 DUP3 PUSH1 0x6 DUP2 MLOAD DUP2 LT PUSH2 0x14C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x160 PUSH2 0x194 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP2 MSTORE POP SWAP1 POP PUSH1 0x3 DUP1 EQ PUSH2 0x18A JUMPI INVALID JUMPDEST DUP2 SWAP5 POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP POP SWAP1 JUMP INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 JUMPDEST 0xAD PUSH9 0xED75BA46B97E6D115F 0x21 0xCD PUSH16 0xE47CB3C9CCF33056A45FC7B946B334E3 EXP PUSH5 0x736F6C6343 STOP SDIV GT STOP ORIGIN ",
							"sourceMap": "25:491:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;25:491:0;;;;;;;"
						},
						"deployedBytecode": {
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b506004361061002b5760003560e01c80632283bffd14610030575b600080fd5b6100386100b3565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561007857808201518184015260208101905061005d565b50505050905090810190601f1680156100a55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6060600060079050606060076040519080825280602002602001820160405280156100ed5781602001602082028038833980820191505090505b5090506060826040519080825280601f01601f1916602001820160405280156101255781602001600182028038833980820191505090505b509050600782511461013357fe5b8281511461013d57fe5b60088260068151811061014c57fe5b602002602001018181525050610160610194565b60405180606001604052806001815260200160028152602001600381525090506003801461018a57fe5b8194505050505090565b604051806060016040528060039060208202803883398082019150509050509056fea265627a7a723158205bad68ed75ba46b97e6d115f21cd6fe47cb3c9ccf33056a45fc7b946b334e30a64736f6c63430005110032",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x2283BFFD EQ PUSH2 0x30 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x38 PUSH2 0xB3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x78 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x5D JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0xA5 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x7 SWAP1 POP PUSH1 0x60 PUSH1 0x7 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xED JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x60 DUP3 PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x125 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x7 DUP3 MLOAD EQ PUSH2 0x133 JUMPI INVALID JUMPDEST DUP3 DUP2 MLOAD EQ PUSH2 0x13D JUMPI INVALID JUMPDEST PUSH1 0x8 DUP3 PUSH1 0x6 DUP2 MLOAD DUP2 LT PUSH2 0x14C JUMPI INVALID JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH2 0x160 PUSH2 0x194 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x2 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x3 DUP2 MSTORE POP SWAP1 POP PUSH1 0x3 DUP1 EQ PUSH2 0x18A JUMPI INVALID JUMPDEST DUP2 SWAP5 POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 SWAP1 PUSH1 0x20 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP POP SWAP1 JUMP INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 JUMPDEST 0xAD PUSH9 0xED75BA46B97E6D115F 0x21 0xCD PUSH16 0xE47CB3C9CCF33056A45FC7B946B334E3 EXP PUSH5 0x736F6C6343 STOP SDIV GT STOP ORIGIN ",
							"sourceMap": "25:491:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;25:491:0;;;;;;;;;;;;;;;;;;;50:464;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;50:464:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;92:12;116:8;127:1;116:12;;164:15;193:1;182:13;;;;;;;;;;;;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;182:13:0;;;;164:31;;241:14;268:3;258:14;;;;;;;;;;;;;;;;;;;;;;;;;29:1:-1;21:6;17:14;116:4;104:10;96:6;87:34;147:4;139:6;135:17;125:27;;0:156;258:14:0;;;;241:31;;302:1;290;:8;:13;283:21;;;;333:3;321:1;:8;:15;314:23;;;;387:1;380;382;380:4;;;;;;;;;;;;;:8;;;;;423:16;;:::i;:::-;:34;;;;;;;;448:1;423:34;;;;452:1;423:34;;;;455:1;423:34;;;;;486:1;474:8;:13;467:21;;;;506:1;499:8;;;;;;50:464;:::o;25:491::-;;;;;;;;;;;29:2:-1;21:6;17:15;117:4;105:10;97:6;88:34;148:4;140:6;136:17;126:27;;0:157;25:491:0;;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "98200",
								"executionCost": "147",
								"totalCost": "98347"
							},
							"external": {
								"testArray()": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 25,
									"end": 516,
									"name": "PUSH",
									"value": "80"
								},
								{
									"begin": 25,
									"end": 516,
									"name": "PUSH",
									"value": "40"
								},
								{
									"begin": 25,
									"end": 516,
									"name": "MSTORE"
								},
								{
									"begin": 25,
									"end": 516,
									"name": "CALLVALUE"
								},
								{
									"begin": 8,
									"end": 17,
									"name": "DUP1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "ISZERO"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "PUSH [tag]",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPI"
								},
								{
									"begin": 30,
									"end": 31,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 27,
									"end": 28,
									"name": "DUP1"
								},
								{
									"begin": 20,
									"end": 32,
									"name": "REVERT"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "tag",
									"value": "1"
								},
								{
									"begin": 5,
									"end": 7,
									"name": "JUMPDEST"
								},
								{
									"begin": 25,
									"end": 516,
									"name": "POP"
								},
								{
									"begin": 25,
									"end": 516,
									"name": "PUSH #[$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 25,
									"end": 516,
									"name": "DUP1"
								},
								{
									"begin": 25,
									"end": 516,
									"name": "PUSH [$]",
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 25,
									"end": 516,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 25,
									"end": 516,
									"name": "CODECOPY"
								},
								{
									"begin": 25,
									"end": 516,
									"name": "PUSH",
									"value": "0"
								},
								{
									"begin": 25,
									"end": 516,
									"name": "RETURN"
								}
							],
							".data": {
								"0": {
									".auxdata": "a265627a7a723158205bad68ed75ba46b97e6d115f21cd6fe47cb3c9ccf33056a45fc7b946b334e30a64736f6c63430005110032",
									".code": [
										{
											"begin": 25,
											"end": 516,
											"name": "PUSH",
											"value": "80"
										},
										{
											"begin": 25,
											"end": 516,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 25,
											"end": 516,
											"name": "MSTORE"
										},
										{
											"begin": 25,
											"end": 516,
											"name": "CALLVALUE"
										},
										{
											"begin": 8,
											"end": 17,
											"name": "DUP1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "ISZERO"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "PUSH [tag]",
											"value": "1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPI"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 27,
											"end": 28,
											"name": "DUP1"
										},
										{
											"begin": 20,
											"end": 32,
											"name": "REVERT"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "tag",
											"value": "1"
										},
										{
											"begin": 5,
											"end": 7,
											"name": "JUMPDEST"
										},
										{
											"begin": 25,
											"end": 516,
											"name": "POP"
										},
										{
											"begin": 25,
											"end": 516,
											"name": "PUSH",
											"value": "4"
										},
										{
											"begin": 25,
											"end": 516,
											"name": "CALLDATASIZE"
										},
										{
											"begin": 25,
											"end": 516,
											"name": "LT"
										},
										{
											"begin": 25,
											"end": 516,
											"name": "PUSH [tag]",
											"value": "2"
										},
										{
											"begin": 25,
											"end": 516,
											"name": "JUMPI"
										},
										{
											"begin": 25,
											"end": 516,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 25,
											"end": 516,
											"name": "CALLDATALOAD"
										},
										{
											"begin": 25,
											"end": 516,
											"name": "PUSH",
											"value": "E0"
										},
										{
											"begin": 25,
											"end": 516,
											"name": "SHR"
										},
										{
											"begin": 25,
											"end": 516,
											"name": "DUP1"
										},
										{
											"begin": 25,
											"end": 516,
											"name": "PUSH",
											"value": "2283BFFD"
										},
										{
											"begin": 25,
											"end": 516,
											"name": "EQ"
										},
										{
											"begin": 25,
											"end": 516,
											"name": "PUSH [tag]",
											"value": "3"
										},
										{
											"begin": 25,
											"end": 516,
											"name": "JUMPI"
										},
										{
											"begin": 25,
											"end": 516,
											"name": "tag",
											"value": "2"
										},
										{
											"begin": 25,
											"end": 516,
											"name": "JUMPDEST"
										},
										{
											"begin": 25,
											"end": 516,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 25,
											"end": 516,
											"name": "DUP1"
										},
										{
											"begin": 25,
											"end": 516,
											"name": "REVERT"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "tag",
											"value": "3"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "JUMPDEST"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "PUSH [tag]",
											"value": "4"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "PUSH [tag]",
											"value": "5"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "tag",
											"value": "4"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "JUMPDEST"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "MLOAD"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "DUP1"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "DUP1"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "ADD"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "DUP3"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "DUP2"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "SUB"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "DUP3"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "MSTORE"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "DUP4"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "DUP2"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "DUP2"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "MLOAD"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "DUP2"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "MSTORE"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "ADD"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "SWAP2"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "POP"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "DUP1"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "MLOAD"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "SWAP1"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "ADD"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "SWAP1"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "DUP1"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "DUP4"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "DUP4"
										},
										{
											"begin": 23,
											"end": 24,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "tag",
											"value": "6"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMPDEST"
										},
										{
											"begin": 33,
											"end": 36,
											"name": "DUP4"
										},
										{
											"begin": 30,
											"end": 31,
											"name": "DUP2"
										},
										{
											"begin": 27,
											"end": 37,
											"name": "LT"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "ISZERO"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "PUSH [tag]",
											"value": "8"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMPI"
										},
										{
											"begin": 99,
											"end": 100,
											"name": "DUP1"
										},
										{
											"begin": 94,
											"end": 97,
											"name": "DUP3"
										},
										{
											"begin": 90,
											"end": 101,
											"name": "ADD"
										},
										{
											"begin": 84,
											"end": 102,
											"name": "MLOAD"
										},
										{
											"begin": 80,
											"end": 81,
											"name": "DUP2"
										},
										{
											"begin": 75,
											"end": 78,
											"name": "DUP5"
										},
										{
											"begin": 71,
											"end": 82,
											"name": "ADD"
										},
										{
											"begin": 64,
											"end": 103,
											"name": "MSTORE"
										},
										{
											"begin": 52,
											"end": 54,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 49,
											"end": 50,
											"name": "DUP2"
										},
										{
											"begin": 45,
											"end": 55,
											"name": "ADD"
										},
										{
											"begin": 40,
											"end": 55,
											"name": "SWAP1"
										},
										{
											"begin": 40,
											"end": 55,
											"name": "POP"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "PUSH [tag]",
											"value": "6"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMP"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "tag",
											"value": "8"
										},
										{
											"begin": 8,
											"end": 108,
											"name": "JUMPDEST"
										},
										{
											"begin": 12,
											"end": 26,
											"name": "POP"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "POP"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "POP"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "POP"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "SWAP1"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "POP"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "SWAP1"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "DUP2"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "ADD"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "SWAP1"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "AND"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "DUP1"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "ISZERO"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "PUSH [tag]",
											"value": "9"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "JUMPI"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "DUP1"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "DUP3"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "SUB"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "DUP1"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "MLOAD"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "DUP4"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "SUB"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "PUSH",
											"value": "100"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "EXP"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "SUB"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "NOT"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "AND"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "DUP2"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "MSTORE"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "ADD"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "SWAP2"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "POP"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "tag",
											"value": "9"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "JUMPDEST"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "POP"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "SWAP3"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "POP"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "POP"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "POP"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "MLOAD"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "DUP1"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "SWAP2"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "SUB"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "SWAP1"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "RETURN"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "tag",
											"value": "5"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "JUMPDEST"
										},
										{
											"begin": 92,
											"end": 104,
											"name": "PUSH",
											"value": "60"
										},
										{
											"begin": 116,
											"end": 124,
											"name": "PUSH",
											"value": "0"
										},
										{
											"begin": 127,
											"end": 128,
											"name": "PUSH",
											"value": "7"
										},
										{
											"begin": 116,
											"end": 128,
											"name": "SWAP1"
										},
										{
											"begin": 116,
											"end": 128,
											"name": "POP"
										},
										{
											"begin": 164,
											"end": 179,
											"name": "PUSH",
											"value": "60"
										},
										{
											"begin": 193,
											"end": 194,
											"name": "PUSH",
											"value": "7"
										},
										{
											"begin": 182,
											"end": 195,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 182,
											"end": 195,
											"name": "MLOAD"
										},
										{
											"begin": 182,
											"end": 195,
											"name": "SWAP1"
										},
										{
											"begin": 182,
											"end": 195,
											"name": "DUP1"
										},
										{
											"begin": 182,
											"end": 195,
											"name": "DUP3"
										},
										{
											"begin": 182,
											"end": 195,
											"name": "MSTORE"
										},
										{
											"begin": 182,
											"end": 195,
											"name": "DUP1"
										},
										{
											"begin": 182,
											"end": 195,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 182,
											"end": 195,
											"name": "MUL"
										},
										{
											"begin": 182,
											"end": 195,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 182,
											"end": 195,
											"name": "ADD"
										},
										{
											"begin": 182,
											"end": 195,
											"name": "DUP3"
										},
										{
											"begin": 182,
											"end": 195,
											"name": "ADD"
										},
										{
											"begin": 182,
											"end": 195,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 182,
											"end": 195,
											"name": "MSTORE"
										},
										{
											"begin": 182,
											"end": 195,
											"name": "DUP1"
										},
										{
											"begin": 182,
											"end": 195,
											"name": "ISZERO"
										},
										{
											"begin": 182,
											"end": 195,
											"name": "PUSH [tag]",
											"value": "11"
										},
										{
											"begin": 182,
											"end": 195,
											"name": "JUMPI"
										},
										{
											"begin": 182,
											"end": 195,
											"name": "DUP2"
										},
										{
											"begin": 182,
											"end": 195,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 182,
											"end": 195,
											"name": "ADD"
										},
										{
											"begin": 29,
											"end": 31,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 21,
											"end": 27,
											"name": "DUP3"
										},
										{
											"begin": 17,
											"end": 32,
											"name": "MUL"
										},
										{
											"begin": 117,
											"end": 121,
											"name": "DUP1"
										},
										{
											"begin": 105,
											"end": 115,
											"name": "CODESIZE"
										},
										{
											"begin": 97,
											"end": 103,
											"name": "DUP4"
										},
										{
											"begin": 88,
											"end": 122,
											"name": "CODECOPY"
										},
										{
											"begin": 148,
											"end": 152,
											"name": "DUP1"
										},
										{
											"begin": 140,
											"end": 146,
											"name": "DUP3"
										},
										{
											"begin": 136,
											"end": 153,
											"name": "ADD"
										},
										{
											"begin": 126,
											"end": 153,
											"name": "SWAP2"
										},
										{
											"begin": 126,
											"end": 153,
											"name": "POP"
										},
										{
											"begin": 0,
											"end": 157,
											"name": "POP"
										},
										{
											"begin": 182,
											"end": 195,
											"name": "SWAP1"
										},
										{
											"begin": 182,
											"end": 195,
											"name": "POP"
										},
										{
											"begin": 182,
											"end": 195,
											"name": "tag",
											"value": "11"
										},
										{
											"begin": 182,
											"end": 195,
											"name": "JUMPDEST"
										},
										{
											"begin": 182,
											"end": 195,
											"name": "POP"
										},
										{
											"begin": 164,
											"end": 195,
											"name": "SWAP1"
										},
										{
											"begin": 164,
											"end": 195,
											"name": "POP"
										},
										{
											"begin": 241,
											"end": 255,
											"name": "PUSH",
											"value": "60"
										},
										{
											"begin": 268,
											"end": 271,
											"name": "DUP3"
										},
										{
											"begin": 258,
											"end": 272,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 258,
											"end": 272,
											"name": "MLOAD"
										},
										{
											"begin": 258,
											"end": 272,
											"name": "SWAP1"
										},
										{
											"begin": 258,
											"end": 272,
											"name": "DUP1"
										},
										{
											"begin": 258,
											"end": 272,
											"name": "DUP3"
										},
										{
											"begin": 258,
											"end": 272,
											"name": "MSTORE"
										},
										{
											"begin": 258,
											"end": 272,
											"name": "DUP1"
										},
										{
											"begin": 258,
											"end": 272,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 258,
											"end": 272,
											"name": "ADD"
										},
										{
											"begin": 258,
											"end": 272,
											"name": "PUSH",
											"value": "1F"
										},
										{
											"begin": 258,
											"end": 272,
											"name": "NOT"
										},
										{
											"begin": 258,
											"end": 272,
											"name": "AND"
										},
										{
											"begin": 258,
											"end": 272,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 258,
											"end": 272,
											"name": "ADD"
										},
										{
											"begin": 258,
											"end": 272,
											"name": "DUP3"
										},
										{
											"begin": 258,
											"end": 272,
											"name": "ADD"
										},
										{
											"begin": 258,
											"end": 272,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 258,
											"end": 272,
											"name": "MSTORE"
										},
										{
											"begin": 258,
											"end": 272,
											"name": "DUP1"
										},
										{
											"begin": 258,
											"end": 272,
											"name": "ISZERO"
										},
										{
											"begin": 258,
											"end": 272,
											"name": "PUSH [tag]",
											"value": "12"
										},
										{
											"begin": 258,
											"end": 272,
											"name": "JUMPI"
										},
										{
											"begin": 258,
											"end": 272,
											"name": "DUP2"
										},
										{
											"begin": 258,
											"end": 272,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 258,
											"end": 272,
											"name": "ADD"
										},
										{
											"begin": 29,
											"end": 30,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 21,
											"end": 27,
											"name": "DUP3"
										},
										{
											"begin": 17,
											"end": 31,
											"name": "MUL"
										},
										{
											"begin": 116,
											"end": 120,
											"name": "DUP1"
										},
										{
											"begin": 104,
											"end": 114,
											"name": "CODESIZE"
										},
										{
											"begin": 96,
											"end": 102,
											"name": "DUP4"
										},
										{
											"begin": 87,
											"end": 121,
											"name": "CODECOPY"
										},
										{
											"begin": 147,
											"end": 151,
											"name": "DUP1"
										},
										{
											"begin": 139,
											"end": 145,
											"name": "DUP3"
										},
										{
											"begin": 135,
											"end": 152,
											"name": "ADD"
										},
										{
											"begin": 125,
											"end": 152,
											"name": "SWAP2"
										},
										{
											"begin": 125,
											"end": 152,
											"name": "POP"
										},
										{
											"begin": 0,
											"end": 156,
											"name": "POP"
										},
										{
											"begin": 258,
											"end": 272,
											"name": "SWAP1"
										},
										{
											"begin": 258,
											"end": 272,
											"name": "POP"
										},
										{
											"begin": 258,
											"end": 272,
											"name": "tag",
											"value": "12"
										},
										{
											"begin": 258,
											"end": 272,
											"name": "JUMPDEST"
										},
										{
											"begin": 258,
											"end": 272,
											"name": "POP"
										},
										{
											"begin": 241,
											"end": 272,
											"name": "SWAP1"
										},
										{
											"begin": 241,
											"end": 272,
											"name": "POP"
										},
										{
											"begin": 302,
											"end": 303,
											"name": "PUSH",
											"value": "7"
										},
										{
											"begin": 290,
											"end": 291,
											"name": "DUP3"
										},
										{
											"begin": 290,
											"end": 298,
											"name": "MLOAD"
										},
										{
											"begin": 290,
											"end": 303,
											"name": "EQ"
										},
										{
											"begin": 283,
											"end": 304,
											"name": "PUSH [tag]",
											"value": "13"
										},
										{
											"begin": 283,
											"end": 304,
											"name": "JUMPI"
										},
										{
											"begin": 283,
											"end": 304,
											"name": "INVALID"
										},
										{
											"begin": 283,
											"end": 304,
											"name": "tag",
											"value": "13"
										},
										{
											"begin": 283,
											"end": 304,
											"name": "JUMPDEST"
										},
										{
											"begin": 333,
											"end": 336,
											"name": "DUP3"
										},
										{
											"begin": 321,
											"end": 322,
											"name": "DUP2"
										},
										{
											"begin": 321,
											"end": 329,
											"name": "MLOAD"
										},
										{
											"begin": 321,
											"end": 336,
											"name": "EQ"
										},
										{
											"begin": 314,
											"end": 337,
											"name": "PUSH [tag]",
											"value": "14"
										},
										{
											"begin": 314,
											"end": 337,
											"name": "JUMPI"
										},
										{
											"begin": 314,
											"end": 337,
											"name": "INVALID"
										},
										{
											"begin": 314,
											"end": 337,
											"name": "tag",
											"value": "14"
										},
										{
											"begin": 314,
											"end": 337,
											"name": "JUMPDEST"
										},
										{
											"begin": 387,
											"end": 388,
											"name": "PUSH",
											"value": "8"
										},
										{
											"begin": 380,
											"end": 381,
											"name": "DUP3"
										},
										{
											"begin": 382,
											"end": 383,
											"name": "PUSH",
											"value": "6"
										},
										{
											"begin": 380,
											"end": 384,
											"name": "DUP2"
										},
										{
											"begin": 380,
											"end": 384,
											"name": "MLOAD"
										},
										{
											"begin": 380,
											"end": 384,
											"name": "DUP2"
										},
										{
											"begin": 380,
											"end": 384,
											"name": "LT"
										},
										{
											"begin": 380,
											"end": 384,
											"name": "PUSH [tag]",
											"value": "15"
										},
										{
											"begin": 380,
											"end": 384,
											"name": "JUMPI"
										},
										{
											"begin": 380,
											"end": 384,
											"name": "INVALID"
										},
										{
											"begin": 380,
											"end": 384,
											"name": "tag",
											"value": "15"
										},
										{
											"begin": 380,
											"end": 384,
											"name": "JUMPDEST"
										},
										{
											"begin": 380,
											"end": 384,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 380,
											"end": 384,
											"name": "MUL"
										},
										{
											"begin": 380,
											"end": 384,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 380,
											"end": 384,
											"name": "ADD"
										},
										{
											"begin": 380,
											"end": 384,
											"name": "ADD"
										},
										{
											"begin": 380,
											"end": 388,
											"name": "DUP2"
										},
										{
											"begin": 380,
											"end": 388,
											"name": "DUP2"
										},
										{
											"begin": 380,
											"end": 388,
											"name": "MSTORE"
										},
										{
											"begin": 380,
											"end": 388,
											"name": "POP"
										},
										{
											"begin": 380,
											"end": 388,
											"name": "POP"
										},
										{
											"begin": 423,
											"end": 439,
											"name": "PUSH [tag]",
											"value": "16"
										},
										{
											"begin": 423,
											"end": 439,
											"name": "PUSH [tag]",
											"value": "17"
										},
										{
											"begin": 423,
											"end": 439,
											"name": "JUMP",
											"value": "[in]"
										},
										{
											"begin": 423,
											"end": 439,
											"name": "tag",
											"value": "16"
										},
										{
											"begin": 423,
											"end": 439,
											"name": "JUMPDEST"
										},
										{
											"begin": 423,
											"end": 457,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 423,
											"end": 457,
											"name": "MLOAD"
										},
										{
											"begin": 423,
											"end": 457,
											"name": "DUP1"
										},
										{
											"begin": 423,
											"end": 457,
											"name": "PUSH",
											"value": "60"
										},
										{
											"begin": 423,
											"end": 457,
											"name": "ADD"
										},
										{
											"begin": 423,
											"end": 457,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 423,
											"end": 457,
											"name": "MSTORE"
										},
										{
											"begin": 423,
											"end": 457,
											"name": "DUP1"
										},
										{
											"begin": 448,
											"end": 449,
											"name": "PUSH",
											"value": "1"
										},
										{
											"begin": 423,
											"end": 457,
											"name": "DUP2"
										},
										{
											"begin": 423,
											"end": 457,
											"name": "MSTORE"
										},
										{
											"begin": 423,
											"end": 457,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 423,
											"end": 457,
											"name": "ADD"
										},
										{
											"begin": 452,
											"end": 453,
											"name": "PUSH",
											"value": "2"
										},
										{
											"begin": 423,
											"end": 457,
											"name": "DUP2"
										},
										{
											"begin": 423,
											"end": 457,
											"name": "MSTORE"
										},
										{
											"begin": 423,
											"end": 457,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 423,
											"end": 457,
											"name": "ADD"
										},
										{
											"begin": 455,
											"end": 456,
											"name": "PUSH",
											"value": "3"
										},
										{
											"begin": 423,
											"end": 457,
											"name": "DUP2"
										},
										{
											"begin": 423,
											"end": 457,
											"name": "MSTORE"
										},
										{
											"begin": 423,
											"end": 457,
											"name": "POP"
										},
										{
											"begin": 423,
											"end": 457,
											"name": "SWAP1"
										},
										{
											"begin": 423,
											"end": 457,
											"name": "POP"
										},
										{
											"begin": 486,
											"end": 487,
											"name": "PUSH",
											"value": "3"
										},
										{
											"begin": 474,
											"end": 482,
											"name": "DUP1"
										},
										{
											"begin": 474,
											"end": 487,
											"name": "EQ"
										},
										{
											"begin": 467,
											"end": 488,
											"name": "PUSH [tag]",
											"value": "18"
										},
										{
											"begin": 467,
											"end": 488,
											"name": "JUMPI"
										},
										{
											"begin": 467,
											"end": 488,
											"name": "INVALID"
										},
										{
											"begin": 467,
											"end": 488,
											"name": "tag",
											"value": "18"
										},
										{
											"begin": 467,
											"end": 488,
											"name": "JUMPDEST"
										},
										{
											"begin": 506,
											"end": 507,
											"name": "DUP2"
										},
										{
											"begin": 499,
											"end": 507,
											"name": "SWAP5"
										},
										{
											"begin": 499,
											"end": 507,
											"name": "POP"
										},
										{
											"begin": 499,
											"end": 507,
											"name": "POP"
										},
										{
											"begin": 499,
											"end": 507,
											"name": "POP"
										},
										{
											"begin": 499,
											"end": 507,
											"name": "POP"
										},
										{
											"begin": 499,
											"end": 507,
											"name": "POP"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "SWAP1"
										},
										{
											"begin": 50,
											"end": 514,
											"name": "JUMP",
											"value": "[out]"
										},
										{
											"begin": 25,
											"end": 516,
											"name": "tag",
											"value": "17"
										},
										{
											"begin": 25,
											"end": 516,
											"name": "JUMPDEST"
										},
										{
											"begin": 25,
											"end": 516,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 25,
											"end": 516,
											"name": "MLOAD"
										},
										{
											"begin": 25,
											"end": 516,
											"name": "DUP1"
										},
										{
											"begin": 25,
											"end": 516,
											"name": "PUSH",
											"value": "60"
										},
										{
											"begin": 25,
											"end": 516,
											"name": "ADD"
										},
										{
											"begin": 25,
											"end": 516,
											"name": "PUSH",
											"value": "40"
										},
										{
											"begin": 25,
											"end": 516,
											"name": "MSTORE"
										},
										{
											"begin": 25,
											"end": 516,
											"name": "DUP1"
										},
										{
											"begin": 25,
											"end": 516,
											"name": "PUSH",
											"value": "3"
										},
										{
											"begin": 25,
											"end": 516,
											"name": "SWAP1"
										},
										{
											"begin": 29,
											"end": 31,
											"name": "PUSH",
											"value": "20"
										},
										{
											"begin": 21,
											"end": 27,
											"name": "DUP3"
										},
										{
											"begin": 17,
											"end": 32,
											"name": "MUL"
										},
										{
											"begin": 117,
											"end": 121,
											"name": "DUP1"
										},
										{
											"begin": 105,
											"end": 115,
											"name": "CODESIZE"
										},
										{
											"begin": 97,
											"end": 103,
											"name": "DUP4"
										},
										{
											"begin": 88,
											"end": 122,
											"name": "CODECOPY"
										},
										{
											"begin": 148,
											"end": 152,
											"name": "DUP1"
										},
										{
											"begin": 140,
											"end": 146,
											"name": "DUP3"
										},
										{
											"begin": 136,
											"end": 153,
											"name": "ADD"
										},
										{
											"begin": 126,
											"end": 153,
											"name": "SWAP2"
										},
										{
											"begin": 126,
											"end": 153,
											"name": "POP"
										},
										{
											"begin": 0,
											"end": 157,
											"name": "POP"
										},
										{
											"begin": 25,
											"end": 516,
											"name": "SWAP1"
										},
										{
											"begin": 25,
											"end": 516,
											"name": "POP"
										},
										{
											"begin": 25,
											"end": 516,
											"name": "POP"
										},
										{
											"begin": 25,
											"end": 516,
											"name": "SWAP1"
										},
										{
											"begin": 25,
											"end": 516,
											"name": "JUMP",
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"testArray()": "2283bffd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"testArray\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"Array.sol\":\"ArrayOnSol\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"Array.sol\":{\"keccak256\":\"0xff56b37e373be8503af8ac9792bad303a8b9911a67359a7c7c82e158d8cac397\",\"urls\":[\"bzz-raw://4a986fc6915c3a10c036daae39958c4158234cfa2eec32cb7db3ad6cc909613a\",\"dweb:/ipfs/QmVjzhy6yYrefSpM8VAuymPoWbBFkvbDPjwNQPHbrkPLhU\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"methods": {}
					}
				}
			}
		},
		"sources": {
			"Array.sol": {
				"ast": {
					"absolutePath": "Array.sol",
					"exportedSymbols": {
						"ArrayOnSol": [
							70
						]
					},
					"id": 71,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.5",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "0:23:0"
						},
						{
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": null,
							"fullyImplemented": true,
							"id": 70,
							"linearizedBaseContracts": [
								70
							],
							"name": "ArrayOnSol",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 68,
										"nodeType": "Block",
										"src": "106:408:0",
										"statements": [
											{
												"assignments": [
													7
												],
												"declarations": [
													{
														"constant": false,
														"id": 7,
														"name": "len",
														"nodeType": "VariableDeclaration",
														"scope": 68,
														"src": "116:8:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 6,
															"name": "uint",
															"nodeType": "ElementaryTypeName",
															"src": "116:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 9,
												"initialValue": {
													"argumentTypes": null,
													"hexValue": "37",
													"id": 8,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "127:1:0",
													"subdenomination": null,
													"typeDescriptions": {
														"typeIdentifier": "t_rational_7_by_1",
														"typeString": "int_const 7"
													},
													"value": "7"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "116:12:0"
											},
											{
												"assignments": [
													13
												],
												"declarations": [
													{
														"constant": false,
														"id": 13,
														"name": "a",
														"nodeType": "VariableDeclaration",
														"scope": 68,
														"src": "164:15:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
															"typeString": "uint256[]"
														},
														"typeName": {
															"baseType": {
																"id": 11,
																"name": "uint",
																"nodeType": "ElementaryTypeName",
																"src": "164:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 12,
															"length": null,
															"nodeType": "ArrayTypeName",
															"src": "164:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
																"typeString": "uint256[]"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 19,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"hexValue": "37",
															"id": 17,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "193:1:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_rational_7_by_1",
																"typeString": "int_const 7"
															},
															"value": "7"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_7_by_1",
																"typeString": "int_const 7"
															}
														],
														"id": 16,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "182:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_$",
															"typeString": "function (uint256) pure returns (uint256[] memory)"
														},
														"typeName": {
															"baseType": {
																"id": 14,
																"name": "uint",
																"nodeType": "ElementaryTypeName",
																"src": "186:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 15,
															"length": null,
															"nodeType": "ArrayTypeName",
															"src": "186:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
																"typeString": "uint256[]"
															}
														}
													},
													"id": 18,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "182:13:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_memory",
														"typeString": "uint256[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "164:31:0"
											},
											{
												"assignments": [
													21
												],
												"declarations": [
													{
														"constant": false,
														"id": 21,
														"name": "b",
														"nodeType": "VariableDeclaration",
														"scope": 68,
														"src": "241:14:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 20,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "241:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 26,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 24,
															"name": "len",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 7,
															"src": "268:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 23,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "258:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 22,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "262:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 25,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "258:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "241:31:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 31,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"id": 28,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 13,
																	"src": "290:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																		"typeString": "uint256[] memory"
																	}
																},
																"id": 29,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "length",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "290:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "37",
																"id": 30,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "302:1:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_7_by_1",
																	"typeString": "int_const 7"
																},
																"value": "7"
															},
															"src": "290:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 27,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 74,
														"src": "283:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 32,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "283:21:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 33,
												"nodeType": "ExpressionStatement",
												"src": "283:21:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 38,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"id": 35,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 21,
																	"src": "321:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																"id": 36,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "length",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "321:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"id": 37,
																"name": "len",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 7,
																"src": "333:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "321:15:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 34,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 74,
														"src": "314:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 39,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "314:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 40,
												"nodeType": "ExpressionStatement",
												"src": "314:23:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 45,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 41,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 13,
															"src": "380:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																"typeString": "uint256[] memory"
															}
														},
														"id": 43,
														"indexExpression": {
															"argumentTypes": null,
															"hexValue": "36",
															"id": 42,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "382:1:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_rational_6_by_1",
																"typeString": "int_const 6"
															},
															"value": "6"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "380:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"hexValue": "38",
														"id": 44,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "387:1:0",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_8_by_1",
															"typeString": "int_const 8"
														},
														"value": "8"
													},
													"src": "380:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 46,
												"nodeType": "ExpressionStatement",
												"src": "380:8:0"
											},
											{
												"assignments": [
													51
												],
												"declarations": [
													{
														"constant": false,
														"id": 51,
														"name": "c",
														"nodeType": "VariableDeclaration",
														"scope": 68,
														"src": "423:16:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint256_$3_memory_ptr",
															"typeString": "uint256[3]"
														},
														"typeName": {
															"baseType": {
																"id": 49,
																"name": "uint",
																"nodeType": "ElementaryTypeName",
																"src": "423:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 50,
															"length": {
																"argumentTypes": null,
																"hexValue": "33",
																"id": 48,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "428:1:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_3_by_1",
																	"typeString": "int_const 3"
																},
																"value": "3"
															},
															"nodeType": "ArrayTypeName",
															"src": "423:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$3_storage_ptr",
																"typeString": "uint256[3]"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 58,
												"initialValue": {
													"argumentTypes": null,
													"components": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"hexValue": "31",
																	"id": 53,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "448:1:0",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	}
																],
																"id": 52,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "443:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": "uint"
															},
															"id": 54,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "443:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "32",
															"id": 55,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "452:1:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														{
															"argumentTypes": null,
															"hexValue": "33",
															"id": 56,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "455:1:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_rational_3_by_1",
																"typeString": "int_const 3"
															},
															"value": "3"
														}
													],
													"id": 57,
													"isConstant": false,
													"isInlineArray": true,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "442:15:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$3_memory_ptr",
														"typeString": "uint256[3] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "423:34:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 63,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"id": 60,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 51,
																	"src": "474:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_uint256_$3_memory_ptr",
																		"typeString": "uint256[3] memory"
																	}
																},
																"id": 61,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "length",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "474:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"hexValue": "33",
																"id": 62,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "486:1:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_3_by_1",
																	"typeString": "int_const 3"
																},
																"value": "3"
															},
															"src": "474:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 59,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 74,
														"src": "467:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 64,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "467:21:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 65,
												"nodeType": "ExpressionStatement",
												"src": "467:21:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 66,
													"name": "b",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 21,
													"src": "506:1:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 5,
												"id": 67,
												"nodeType": "Return",
												"src": "499:8:0"
											}
										]
									},
									"documentation": null,
									"id": 69,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "testArray",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "68:2:0"
									},
									"returnParameters": {
										"id": 5,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4,
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 69,
												"src": "92:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 3,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "92:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "91:14:0"
									},
									"scope": 70,
									"src": "50:464:0",
									"stateMutability": "pure",
									"superFunction": null,
									"visibility": "public"
								}
							],
							"scope": 71,
							"src": "25:491:0"
						}
					],
					"src": "0:516:0"
				},
				"id": 0
			}
		}
	}
}